#!/usr/bin/env bash
# When passing the argument start:
# 1. Starts manage_my_process
# 2. Creates a file containing its PID in /var/run/my_process.pid
# 3. Displays manage_my_process started
# When passing the argument stop:
# 1. Stops manage_my_process
# 2. Deletes the file /var/run/my_process.pid
# 3. Displays manage_my_process stopped
# When passing the argument restart
# 1. Stops manage_my_process
# 2. Deletes the file /var/run/my_process.pid
# 3. Starts manage_my_process
# 4. Creates a file containing its PID in /var/run/my_process.pid
# 5. Displays manage_my_process restarted
# Displays Usage: manage_my_process {start|stop|restart}
# if any other argument or no argument is passed

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PID_FILE="$SCRIPT_DIR/var/run/my_process.pid"
MANAGE_MY_PROCESS="$SCRIPT_DIR/manage_my_process"

start_manage_my_process()
{
	if [ -f "$PID_FILE" ];
	then
		echo "manage_my_process is already running. Use 'restart' if needed."
		exit 1
	fi

	"$MANAGE_MY_PROCESS" &         # Assuming manage_my_process is in the same directory
	echo $! > "$PID_FILE"
	echo "manage_my_process started with PID: $!"
}

stop_manage_my_process()
{
	if [ -f "$PID_FILE" ];
	then
		pid=$(cat "$PID_FILE" 2>/dev/null)
		if ps -p "$pid" &>/dev/null; then
			kill "$pid" &>/dev/null
			echo "manage_my_process stopped"
		else
			echo "manage_my_process is not running"
		fi
		rm "$PID_FILE"
	else
		echo "manage_my_process is not running"
	fi
}

restart_manage_my_process()
{
	stop_manage_my_process
	start_manage_my_process
	echo "manage_my_process restarted"
}

case "$1" in
	start)
		start_manage_my_process
		;;
	stop)
		stop_manage_my_process
		;;
	restart)
		restart_manage_my_process
		;;
	*)
		echo "Usage: $0 {start|stop|restart}"
		exit 1
		;;
esac
